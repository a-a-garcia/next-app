// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//generating a prisma client
generator client {
  provider = "prisma-client-js"
}

//for generating a prisma file
datasource db {
  //or mongoDb and so on...
  provider = "mysql"
  //no need to change this
  url      = env("DATABASE_URL")
}

//We define one or more models here for our database!

//use PascalCase for models

// The below models were commented out once we got to the Database Adapters section of the course

// model User {
//   id           Int      @id @default(autoincrement())
//   email        String   @unique
//   name         String
//   followers    Int      @default(0)
//   isActive     Boolean  @default(true)
//   registeredAt DateTime @default(now())
// }

// model Product {
//   id           Int      @id @default(autoincrement())
//   name         String   @unique
//   price        Float
//   registeredAt DateTime @default(now())
// }

//question mark ie Int? makes the field optional
//run npx prisma format to make the formatting neat


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
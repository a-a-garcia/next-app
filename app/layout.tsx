import './globals.css'
import type { Metadata } from 'next'
import { Inter, Roboto } from 'next/font/google'
import localFont from 'next/font/local'
import NavBar from './NavBar'
import { Suspense } from 'react'
import AuthProvider from './auth/Provider'
import Script from 'next/script'
import GoogleAnalyticsScript from './GoogleAnalyticsScript'



const inter = Inter({ subsets: ['latin'] })

//how to use fonts 
const roboto = Roboto({
  subsets: ['latin'],
  weight: ['400', '500']
})

//local fonts

const poppins = localFont({
  src: '../public/fonts/poppins-regular-webfont.woff2',
  //when creating a font, we should setthe variable property to the name of a css variable or custom property that represents our font
  variable: '--font-poppins'
})
// make sure to register the font in your tailwind.config.js file

//metadata is used for SEO purposes
//every page will have these meta tags
// we can override these in each page
export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
  // used when we share our site on social media platforms
  openGraph : {
    title: '...',
    description: '...'
  }
}

//this is a basic react component that returns an HTML and body element. 

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
return (
    <html lang="en" data-theme="winter">
      <GoogleAnalyticsScript />
      {/* <body className={roboto.className}> */}
      <body className={poppins.variable}>
        {/* it's cleaner to create a separate component for Nav */}
        <AuthProvider>
          <NavBar />
          {/* more semantic html to wrap children in a <main> tag */}
          <main className='p-5'>
            {/* Wrapping children in Suspense here is one way to applying loading UI, other is creating a loading.tsx in /app */}
            {/* <Suspense fallback={<p>Loading...</p>}> */}
              {children}
            {/* </Suspense> */}
          </main>
        </AuthProvider>
      </body>
      {/* children is dynamically replaced by a page at runtime, where the user is in our app */}
    </html>
  )
}
